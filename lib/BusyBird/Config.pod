=pod

=head1 NAME

BusyBird::Config - list of config parameters for BusyBird

=head1 SYNOPSIS

    Write synopsis(?)

=head1 DESCRIPTION

TODO: we should write the documentation from the point of writing config.psgi.
Individual modules should be mentioned but set aside.

This document describes config parameters for L<BusyBird::Main> and L<BusyBird::Timeline>.

=head2 How to Set/Get Config Parameters

TBW. Keep in mind that users usually write configuration through L<BusyBird> interface.

=head2 Config Precedence

TBW

=head1 PARAMETERS FOR BusyBird::Main

=head2 C<default_status_storage> => BusyBird::StatusStorage OBJECT

B<Default:> L<BusyBird::StatusStorage::SQLite> object at C<~/.busybird/statuses.sqlite3>

A StatusStorage object used for Timelines by default.

A StatusStorage is an object where timelines save their statuses.
When a timeline is created by L<BusyBird::Main>'s C<timeline()> method, the default StatusStorage is used for the timeline.

Note that the default StatusStorage object is referred to only when creating timelines via C<timeline()> method.
Existing timelines are not affected by changing the default StatusStorage object.

A StatusStorage object is an implementation of L<BusyBird::StatusStorage> interface.
For example, the following modules can be used as StatusStorage.

=over

=item *

L<BusyBird::StatusStorage::SQLite> - storage backed by SQLite database

=item *

L<BusyBird::StatusStorage::Memory> - storage in the process memory

=back

See each module's documentation for details.


=head2 C<sharedir_path> => PATH

B<Default:> sharedir in your installation directory

File path to "share" directory.

"share" directory contains static files used by L<BusyBird>,
which include HTML templates, JavaScript files and image files.

=head2 C<timeline_list_per_page> => INT

B<Default:> 30

Number of timelines shown in a single page of the timeline list.

=head2 C<timeline_list_pager_entry_max> => INT

B<Default:> 7

Maximum number of page entries shown in the pagination of the timeline list page.

=head1 PARAMETERS FOR BusyBird::Timeline


=head2 C<time_zone> => TIMEZONE_STR

B<Default:> C<"local">

Timezone used to render status timestamps.
C<TIMEZONE_STR> accepts various timezone names such as C<"UTC">, C<"America/Chicago">, C<"+0900">, C<"-0300">.

You can set special value C<"local"> to C<TIMEZONE_STR>.
This means the timezone of the local environment is used.

=head2 C<time_format> => STRFTIME_FORMAT_STR

B<Default:> C<"%x (%a) %X %Z">

Format used to render status timestamps.
The format string conforms to the C<strftime(3)> specification.

=head2 C<time_locale> => LOCALE_STR

B<Default:> C<LC_TIME> environment variable or C<"C">

Locale used to render status timestamps.

C<LOCALE_STR> is a valid locale string such as C<"en_US">, C<"ja_JP"> etc.

=head2 C<post_button_url> => URL_STR

B<Default:> C<"https://twitter.com/intent/tweet">

Link URL attached to the "Post" button in the navigation bar.

=head2 C<status_permalink_builder> => CODEREF($status)

B<Default:> return C<< $status->{busybird}{status_permalink} >>, or build permalink to the status page of twitter.com, or return C<undef>

Subroutine reference that is supposed to build permalink URL to the status.

The builder subroutine reference is called with the status object, as in:

    $url_str = $builder->($status)

C<$url_str> is a string.
If the result C<$url_str> is C<undef> or does not look like a valid URL, it is ignored.

=head2 C<urls_entity_url_builder> => CODEREF($text, $entity, $status)

B<Default:> return C<< $entity->{url} >>

=head2 C<media_entity_url_builder> => CODEREF($text, $entity, $status)

B<Default:> return C<< $entity->{url} >>

=head2 C<user_mentions_entity_url_builder> => CODEREF($text, $entity, $status)

B<Default:> build URL to the user page of twitter.com

=head2 C<hashtags_entity_url_builder> => CODEREF($text, $entity, $status)

B<Default> build URL to the hashtag search page of twitter.com

The above four configurations specify how L<Twitter Entities|https://dev.twitter.com/docs/platform-objects/entities>
in a status object generate link URLs attached to the status text.

The builder subroutine reference is called in the following way

    $url_str = $builder->($text, $entity, $status)

where C<$text> is the segment of status text the entity is attached to, C<$entity> is the Twitter Entity object,
and C<$status> is the whole status object. C<$url_str> is a string.

If the result C<$url_str> is C<undef> or does not look like a valid URL, it is ignored, i.e., the text is not linked.

=head2 C<urls_entity_text_builder> => CODEREF($text, $entity, $status)

B<Default:> return C<< $entity->{display_url} >>

=head2 C<media_entity_text_builder> => CODEREF($text, $entity, $status)

B<Default:> return C<< $entity->{display_url} >>

=head2 C<user_mentions_entity_text_builder> => CODEREF($text, $entity, $status)

B<Default:> return C<$text>

=head2 C<hashtags_entity_text_builder> => CODEREF($text, $entity, $status)

B<Default:> return C<$text>

The above four configurations specify how L<Twitter Entities|https://dev.twitter.com/docs/platform-objects/entities>
in a status object convert status texts to be displayed.

The builder subroutine reference is called in the following way

    $text_to_be_displayed = $builder->($text, $entity, $status)

where C<$text> is the segment of status text the entity is attached to, C<$entity> is the Twitter Entity object,
and C<$status> is the whole status object. C<$text_to_be_displayed> is a string.

If C<$text_to_be_displayed> is C<undef>, the original C<$text> is used for display.

If a C<*_entity_url_builder> subroutine reference returns non-URL for the C<$entity>,
the text is not linked and the corresponding C<*_entity_text_builder> is not called.

=head1 AUTHOR

Toshio Ito C<< <toshioito [at] cpan.org> >>

=cut

